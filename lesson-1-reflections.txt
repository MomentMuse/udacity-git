//How did viewing a diff (for Windows, FC) between two versions of a file help you see the bug that was introduced?

It simplified the process by showing only the code that changed between the two versions.

//How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

When you encounter bugs in your code, you would be able to rollback your to an earlier version as a way of troubleshooting/pinpointing the issue.

//What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros: more control over meaningful commits, can be attuned to the code itself, logical break points, named commits help you navigate through past versions
Cons: May lose progress if you don't save often enough, more work than automatic saving

//Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

For files of code that have interrelated classes, functions, and objects, it's important to have a VCS that can keep track of changes across multiple files. For rich text editors that are usually self-contained, a single, linear commit history is sufficient.

//How can you use the commands git log and git diff to view the history of files?

- git log displays a log of previous commits of the repository
- git diff followed by two commit IDs will compare the changes between the two commits (what was removed is red, what was added is green)

//How might using version control make you more confident to make changes that could break something?

With version control, you don't have to worry about breaking your application when trying out new ways of coding, because you could always compare commit differences and revert your file back to an older commit, before the bug was introduced. You can explore deep architectural concepts more efficiently and progress as a programmer.

//Now that you have your workspace set up, what do youw ant to try using Git for?

For commiting whatever I'm working on (algorithim practice, toy problems, web apps, code-alongs) to github and fill out my profile.